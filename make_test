#!/bin/bash


############################################################################
##                            Argument scanning                           ##
############################################################################

ncpath=""
case_name=""
comp_mode="standard"
keep_config=0
restore=0
rm_logs=0

while [ $# -ge 1 ]
do

    case $1 in

        "--ncpath")
	    if [ $# -ge 2 ]
	    then
	        ncpath=$2
		shift 2
	    else
	        echo ""
                echo "Error: path required after option '--ncpath'. Option ignored."
		shift 1
	    fi
	    ;;

	"--debug")
	    comp_mode="debug"
	    shift 1
	    ;;

	"--keep-config")
	    keep_config=1
	    shift 1
	    ;;

	"--restore"|'--restore-config')
	    restore=1
	    shift 1
	    ;;

	"--clean")
	    rm_logs=1
	    shift 1
	    ;;

	*)
	    if [ -z $case_name ]
	    then
	        case_name=$1
	    else
		echo ""
		echo "Warning: Ignore extra input argument \"$1\""
	    fi
	    shift 1
	    ;;

    esac

done


############################################################################
##                                Help text                               ##
############################################################################

test $restore -eq 1 -a "$case_name" == ""  &&  case_name="_%STOP%_"
test $rm_logs -eq 1 -a "$case_name" == ""  &&  case_name="_%STOP%_"

if [ "$case_name" == ""  -o  "$case_name" == "help"  -o  "$case_name" == "--help" ]
then
    echo ""
    echo "SYNOPSIS"
    echo ""
    echo "     ./make_test case_name [--ncpath path] [--debug] [--keep-config] [--clean]"
    echo "     ./make_test --restore|--restore-config"
    echo "     ./make_test --clean"
    echo ""
    echo ""
    echo "DESCRIPTION"
    echo ""
    echo "     'make_test' is a bash script that configured GEOCLIM for the given template"
    echo "     case, compile the code, execute the template run, and compare the outputs"
    echo "     (several COMBINE key variables) to a reference template run."
    echo "     It uses the script 'build_GEOCLIM', itself using the Makefile is \"source/\","
    echo "     and the Fortran codes + Makefile in postproc/template_comparison/ for the"
    echo "     comparison check."
    echo ""
    echo "     For the sake of simplicity, you must have installed one of the known"
    echo "     Fortran compiler: gfortran, ifort or pgfortran"
    echo ""
    echo "     You must also have installed a netCDF-Fortran library compatible with your"
    echo "     Fortran compiler. The compilation procedure gets the library path with"
    echo "     \`nc-config --prefix\` or use \"/usr\", if it fails."
    echo "     You can manually specify it with the option '--ncpath path'"
    echo ""
    echo "     Use option '--debug' to compile GEOCLIM with debugging options"
    echo ""
    echo "     When the run is completed, you can compare the outputs with the reference"
    echo "     one (with same *run* name) that is in 'OUTPUT/templates/'"
    echo ""
    echo "     If you want the code not to restore the original configuration files, and"
    echo "     to let the ones used for the test, use the option \"--keep-config\". The"
    echo "     original files will be kept in the backup directory \".case_backup/\""
    echo "     WARNING: if you re-run \`make_test\` after, these \"test\" configuration"
    echo "     files will be considered as the original ones, and the true original ones"
    echo "     will be lost. To avoid that, use the option \"--restore-config\""
    echo "     (\"--restore\") to put back the eventual files stored in .case_backup/"
    echo "     This option can be used without running a case (\`./make_test --restore\`)"
    echo ""
    echo "     The option \"--clean\" is for deleting the log files, and can also be used"
    echo "     without running a case (\`./make_test --clean\`)"
    echo ""
    echo ""
    echo "     TEMPLATE CASE NAMES:"
    echo ""
    echo "     ERA5"
    echo "             Short Geoclim run (100 years) with DynSoil dynamic module, ERA5"
    echo "             boundary conditions (fixed 1PAL CO2, 0.5° of spatial resolution),"
    echo "             parametric oceanic temperature (fixed)."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: ERA5 (old) calibration"
    echo "             CO2 degassing = deduced from ERA5 calibration"
    echo "             COMBINE initial condition: restart/geoclim/output.calib_ERA5.equil"
    echo "             DynSoil initialization: startup:eq (analytical steady-state)"
    echo "             Oceanic boundary conditions: idealized"
    echo "             Seafloor sediment transport scheme: uniform"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Run name: .testrun_ERA5-DS-short"
    echo "             ----------"
    echo "             Reference for climate dataset:"
    echo "             Hersbach, H. et al., (2019): ERA5 monthly averaged data on single"
    echo "             levels from 1979 to present. Copernicus Climate Change Service (C3S)"
    echo "             Climate Data Store (CDS). (accessed on 19 Feb 2020)"
    echo "             https://doi.org/10.24381/cds.f17050d7"
    echo "             distributed under Copernicus Products license:"
    echo "             https://cds.climate.copernicus.eu/api/v2/terms/static/licence-to-use-copernicus-products.pdf"
    echo ""
    echo "     IPSL"
    echo "             10 kyr Geoclim run with DynSoil dynamic module, IPSL-CM5A2 pre-"
    echo "             industrial boundary conditions (res. 96x96), 1 CO2 level (280ppm)."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             CO2 degassing = deduced from IPSL-CM5A2 calibration"
    echo "             COMBINE initial condition: restart/geoclim/output.ref"
    echo "             DynSoil initialization: startup:eq (analytical steady-state)"
    echo "             Oceanic boundary conditions: derived from IPSL simulation"
    echo "             Seafloor sediment transport scheme: neighbourg"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Run name: .testrun_IPSL"
    echo ""
    echo "     CESM"
    echo "             10 kyr Geoclim run with DynSoil dynamic module, boundary conditions"
    echo "             are CESM1.2 slab simulations, spatial resolution: 1.25° x 0.9°"
    echo "             (lon x lat), 2 CO2 levels (1 PAL and 2 PAL), parametric oceanic"
    echo "             temperature."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             Lock Oxygen and Sulfur cycles"
    echo "             CO2 degassing = 4 times IPSL-CM5A2 calibration"
    echo "             COMBINE initial condition: restart/geoclim/output.calib_ERA5.equil"
    echo "             DynSoil initialization: startup:null (no regolith)"
    echo "             Oceanic boundary conditions: idealized + parametric temperature"
    echo "             Seafloor sediment transport scheme: uniform"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Run name: .testrun_CESM1.2-DSnull"
    echo ""
    echo "     paleo"
    echo "             50 kyr Geoclim run with DynSoil steady-state module, boundary"
    echo "             conditions are Thitonian (150Ma) ocean-atmosphere coupled FOAM"
    echo "             simulations, spatial resolution: 128x128 (~ 2.8° x 1.4°), 11 CO2"
    echo "             levels (560ppm -- 8960ppm)."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             Oxygen and Sulfur cycles accelerated x33"
    echo "             CO2 degassing = 2 times pre-industrial IPSL degassing."
    echo "             Lithology mask: 6 class, uniform (modern values)"
    echo "             Slope field: \"crude\" linear regression of paleo-elevation."
    echo "             COMBINE initial condition: internally-generated ('coldstart')"
    echo "             Oceanic boundary conditions: oceanic temperature from FOAM,"
    echo "                                          all others from modern configuration"
    echo "             Seafloor sediment transport scheme: uniform"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Run name: .testrun_FOAM-paleo"
    echo "             ----------"
    echo "             Reference for GCM simulations:"
    echo "             Pohl, A et al., 2019,"
    echo "             https://doi.pangaea.de/10.1594/PANGAEA.904255"
    echo "             distributed under Creative Commons license  (CC-BY-4.0)"
    echo "             https://creativecommons.org/licenses/by/4.0/"
    echo ""
    echo "     ascii"
    echo "             10 kyr Geoclim run with parametric weathering law (DynSoil module"
    echo "             not activated), boundary conditions are pre-industrial FOAM"
    echo "             simulations, spatial resolution: 7.5° x 4.5° (lon x lat), 6 CO2"
    echo "             levels (200ppm -- 560ppm), parametric oceanic temperature."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             CO2 degassing = 2 times pre-industrial IPSL degassing."
    echo "             Lithology mask: 6 class, uniform."
    echo "             COMBINE initial condition: restart/geoclim/output.calib_ERA5.equil"
    echo "             Oceanic boundary conditions: historical (with parametric temp.)"
    echo "             Seafloor sediment transport scheme: uniform"
    echo "             Input data format: ascii"
    echo "             CO2 interpolation: linear"
    echo "             Run name: .testrun_FOAM-ascii"
    echo ""
    echo "     orbit"
    echo "             400 kyr Geoclim run with DynSoil steady-state module, idealized"
    echo "             orbital cycles (precession, eccentricity and obliquity), and"
    echo "             made-up boundary conditions (both climate and slope) on a \"fake\""
    echo "             3x2 grid, with 1 CO2 level."
    echo "             COMBINE resolution: 10 boxes, single coastal box"
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             CO2 degassing = pre-industrial IPSL degassing."
    echo "             Lithology mask: 6 class, uniform"
    echo "             COMBINE initial condition: restart/geoclim/output.calib_ERA5.equil"
    echo "             Oceanic boundary conditions: historical (with parametric temp.)"
    echo "             Seafloor sediment transport scheme: uniform"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Climatic (orbital) parameters reading: every 1 kyr"
    echo "             Run ending: when reached end of climatic parameter time-series"
    echo "             Run name: .testrun_FakeOrbitParam"
    echo ""
    echo "     19box"
    echo "             1 kyr Geoclim run with DynSoil dynamic module, IPSL-CM5A2 pre-"
    echo "             industrial boundary conditions (res. 96x96), 1 CO2 level (280ppm)."
    echo "             COMBINE resolution: 19 boxes (Arctic, Atlantic, Pacific, S oce.),"
    echo "                                 coastal boxes split per oceanic basin."
    echo "             Parameterization: IPSL-CM5A2 calibration"
    echo "             CO2 degassing = deduced from IPSL-CM5A2 calibration"
    echo "             COMBINE initial condition: internally-generated ('coldstart')"
    echo "             DynSoil initialization: startup:eq (analytical steady-state)"
    echo "             Oceanic boundary conditions: derived from IPSL simulation"
    echo "             Seafloor sediment transport scheme: neighbourg"
    echo "             Land-to-ocean flux routing: deduced from IPSL basinmap"
    echo "             Input data format: netCDF (GCM outputs)"
    echo "             CO2 interpolation: logarithmic"
    echo "             Run name: .testrun_IPSL"
    exit 0
fi


############################################################################
##                           Template configuration                       ##
############################################################################

# If ask, restore eventual files stored in backup directory
if [ $restore -eq 1 ]
then
    if [ -d .case_backup ]
    then
	mv -f .case_backup/IO_CONDITIONS config/IO_CONDITIONS
	mv -f .case_backup/constante.f90 source/constante.f90
	mv -f .case_backup/cont_weath.f  source/cont_weath.f
	mv -f .case_backup/shape.inc     source/shape.inc
	mv -f .case_backup/coupler.inc   source/coupler.inc
	rm -r -f .case_backup
    else
        echo ""
	echo "NOTE: no backup files to restore."
    fi
fi

if [ "$case_name" == "_%STOP%_" ]
then
    test $rm_logs -eq 1 && rm -f GEOCLIM_environment build.log build.error postproc/template_comparison/build.log postproc/template_comparison/build.error
    exit 0
fi

# Backup of files susceptible to be modified:
rm -r -f .case_backup
mkdir .case_backup
cp config/IO_CONDITIONS source/shape.inc source/coupler.inc source/constante.f90 source/cont_weath.f .case_backup/

case $case_name in

    "ERA5")
        # Copy main configuration file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.ERA5-short config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.ERA5' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.ERA5 > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.ERA5-short.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="1,720,360,6,10"
	compset="COMBINE_WTH:DynSoil%dyn"
	interpolation="log"
	other_options=""
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-1x720x360x6_DS-10lev.exe'
        ;;

    "IPSL")
        # Copy main configuration file and model parameter file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.IPSL-test config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.IPSL-CM5A2' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.IPSL-CM5A2 > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.IPSL-test.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="1,96,96,6,10"
	compset="COMBINE_WTH:DynSoil%dyn"
	interpolation="log"
	other_options=""
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-1x96x96x6_DS-10lev.exe'
        ;;

    "CESM")
        # Copy main configuration file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.CESM1.2-test config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.ref' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.CESM1.2-test > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.CESM1.2-test.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="2,288,192,6,10"
	compset="COMBINE_WTH:DynSoil%dyn"
	interpolation="log"
	other_options="--lock OS"
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-2x288x192x6_DS-10lev_LCK-OS.exe'
        ;;

    "paleo")
        # Copy main configuration file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.FOAM-paleo config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.ref' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.FOAM-paleo > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.FOAM-paleo.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="11,128,128,6,10"
	compset="COMBINE_WTH:DynSoil%steady"
	interpolation="log"
	other_options=""
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-11x128x128x6_DS-SS.exe'
        ;;

    "ascii")
        # Copy main configuration file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.FOAM-ascii config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.ref' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/cond_p20.FOAM-ascii.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="6,48,40,6"
	compset="COMBINE_WTH:old"
	interpolation="linear"
	other_options=""
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-6x48x40x6.exe'
        ;;

    "orbit")
        # Copy main configuration file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.FakOrbPar config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.ref' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.FakOrbPar > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.FakOrbPar.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="1,3,2,6,10"
	compset="COMBINE_WTH:DynSoil%steady"
	interpolation="log"
	other_options="--clim-param 3,2,4 --clim-param-periods ,,360. --param-ending stoprun"
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-10_R-1x3x2x6_P-3x2x5x1x1_DS-SS.exe'
        ;;

    "19box")
        # Copy main configuration file and model parameter file
        test -e config/IO_CONDITIONS && rm -f config/IO_CONDITIONS
	cp config/templates/IO_CONDITIONS.IPSL-AAPS config/IO_CONDITIONS
	config_iostat=$?
	#
        test -e 'source/constante.f90' && rm -f 'source/constante.f90'
	cp 'source/templates/constante.f90.IPSL-CM5A2' 'source/constante.f90'
	test $? -ne 0 && config_iostat=1
	#
	# Check that other configuration files exist
	ls config/templates/GCM_input_conditions.IPSL-CM5A2 > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	ls config/templates/cond_p20.IPSL-AAPS.dat > /dev/null
	test $? -ne 0 && config_iostat=1
	#
	# Run configuration
	resolution="1,96,96,6,10"
	compset="COMBINE_WTH:DynSoil%dyn"
	interpolation="log"
	other_options="--nbasin 19"
	#
	# executable name (as will be defined by 'build_GEOCLIM')
	exec_name='geoclim_B-19_R-1x96x96x6_DS-10lev.exe'
        ;;

    *)
        echo ""
	echo "Error: unknown template name \"$case_name\""
	exit -1

esac

if [ $config_iostat -ne 0 ]
then
    echo ""
    echo "ERROR: template configuration file(s) missing"
    # put back original files
    cp -f .case_backup/IO_CONDITIONS config/IO_CONDITIONS
    cp -f .case_backup/constante.f90 source/constante.f90
    cp -f .case_backup/cont_weath.f  source/cont_weath.f
    rm -r -f .case_backup
    exit 1
fi

# Erase deathnote file
test -e deathnote.txt && rm -f deathnote.txt
touch deathnote.txt


############################################################################
##                           Compile and run template                     ##
############################################################################

# Complete configuration and compile (with 'build_GEOCLIM' command
test -z $ncpath && netcdf_option="" || netcdf_option="--ncpath $ncpath"

./build_GEOCLIM --resolution $resolution --compset $compset --co2-interp $interpolation --compilation-mode $comp_mode --reset $netcdf_option $other_options

# If successful: run template
test $? -eq 0 && executable/$exec_name 0 1 3 0 0

# If run succesfull: make template comparison
if [ $? -eq 0 ]
then
    echo ""
    echo ""
    echo "Compare outputs to reference template output"
    echo "============================================"
    echo ""
    source GEOCLIM_environment
    cd postproc/template_comparison/
    if [ $? -eq 0 ]
    then
	rm -f build.*
	echo "Compile comparison code..."
	echo ""
	if [ "$FFLAGS" != "" ]
	then
	    make FC=$FC MODE=$MODE FFLAGS="$FFLAGS" > build.log 2> build.error
	elif [ "$main_fflags" != "" ]
	then
	    if [ "$NETCDF_FLAGS" != "" ]
	    then
		make FC=$FC MODE=$MODE main_flags="$main_fflags" NETCDF_FLAGS="$NETCDF_FLAGS" > build.log 2> build.error
	    else
		make FC=$FC MODE=$MODE main_flags="$main_fflags" > build.log 2> build.error
	    fi
	elif [ "$NETCDF_FLAGS" != "" ]
	then
	    make FC=$FC MODE=$MODE NETCDF_FLAGS="$NETCDF_FLAGS" > build.log 2> build.error
	else
	    make FC=$FC MODE=$MODE > build.log 2> build.error
	fi
	if [ $? -eq 0 ] 
	then
	    echo ""
	    echo "Execute comparison code..."
	    echo ""
	    ./compare_template.exe
	else
	    echo ""
	    echo "Compilation failed. Cannot conduct comparison check."
	    echo "See postproc/template_comparison/build.log and postproc/template_comparison/build.error"
	    echo "for more information"
	fi
	make clc > /dev/null 2>&1
	cd ../../
    fi
fi

# Put back original files
if [ $keep_config -eq 0 ]
then
    cp -f .case_backup/IO_CONDITIONS config/IO_CONDITIONS
    cp -f .case_backup/constante.f90 source/constante.f90
    cp -f .case_backup/cont_weath.f  source/cont_weath.f
    cp -f .case_backup/shape.inc     source/shape.inc
    cp -f .case_backup/coupler.inc   source/coupler.inc
    rm -r -f .case_backup
fi

test $rm_logs -eq 1 && rm -f GEOCLIM_environment build.log build.error postproc/template_comparison/build.log postproc/template_comparison/build.error

cd source
make clean > /dev/null

